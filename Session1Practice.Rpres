```{r setup, include=FALSE, echo=FALSE}
opts_chunk$set(cache=TRUE)
library(ggplot2)
library(lattice)
library(FSAdata)
data(BlueCatfish)
```

INTRODUCCIÓN AL MANEJO DE DATOS Y PROGRAMACIÓN EN R: PRÁCTICA 1
========================================================
font-family: 'Serif'
width: 1366
height: 768
author: Gustavo A. Ballen

Museu de Zoologia da Universidade de São Paulo

gaballench@gmail.com


Práctica 1: Asignacion, clases
=======================================================

* Cree una variable llamada `saludo`. Asigne a esta variable la frase `"Hola mundo de R! Llegué para quedarme"` usando el operador `<-`. Compare la presentación del valor de dicha variable con dos métodos: `print(saludo)` y `saludo`. Encuentra alguna diferencia entre ambos métodos?.

* Indique la clase (i.e., el tipo de datos que contiene) de dicha variable. Use las funciones `class()` o `str()`; encuentra alguna diferencia entre la información obtenida por ambos métodos?.

* Asigne el valor `5` a una variable `x`. Asigne el valor `5L` a una variable `y`. Observe ahora el valor de cada variable. Son diferentes? Verifique la clase de cada objeto. Son diferentes?

Práctica 1: Operadores lógicos
=======================================================

* Cuál va a ser el resultado de estas expresiones lógicas?

+ 2 < 3
+ 2 > 3
+ 0 <= 1
+ 1 <= 1
+ 1 >= -1
+ 3 == 3
+ 3 != 3
+ f  <- 5; 6 != !f

***

+ 6 == 5 | 8
+ 7 != 7 & 7
+ isTRUE(class("Programar en r es útil"))
+ 2 + 3 == "Cinco"
+ "Dos + Tres" == "Cinco"
+ 2 + 3 == 5
+ 5**2 != 100/4
+ is.character(TRUE)
+ is.character("TRUE")
+ is.complex(3+1i)

Práctica 1: Modificaciones de vectores
=======================================================

* Cree un objeto de las siguientes clases y llámelo como prefiera: `"character"`, `"integer"`, `"numeric"`, `"logical"`, `"complex"` (lo mismo que imaginario). TODOS deben ser de longitud `1`; Verifique la clase de cada objeto con las funciones que ya conoce. Alternativamente puede probar con `is.'clase_particular'('objeto')` (e.g., `is.integer(x)`)

* Cree un objeto con los números enteros del 1 al 5. Puede hacerlo por medio de la función `c()`, que `c`oncatena elementos en un vector. (Sugerencias: Escriba 1, 2, ..., 5 en dicha función, o asigne el valor de 1:5 a este. Los resultados difieren?)

Práctica 1: Operaciones vectorizadas [NO CORRER ANTES DE RESPONDER!]
=======================================================

* Cuál es el resultado de la siguiente operación: `x + 2` dado que `x <- 1:10`. Cuál será el resultado de `y * 2` dado que `y <- 1:10`. Por qué se observan esos resultados?

* Dados los vectores `x` y `y` arriba, cuál es el tamaño del vector `z` resultante de la siguiente línea de código: `z <- x + y`. Hay alguna diferencia con `z <- c(x, y)`? Si es así, cuál es el tamaño del vector resultante?

Práctica 1: Arreglos bidimensionales
=======================================================

* Cree el siguiente objeto `matriz <- cbind(a = 1:10, b = 11:20, c = 21:30, d = 31:40)`. Ahora agregue una columna adicional de 10 valores de clase `integer`. Es importante que sean de la misma clase pues estamos creando una matriz y no un data frame. Cuáles son las dimensiones de ese objeto?

* Cree ahora un data frame con el siguiente código. Cree que sea igual usar la función `cbind()` o `data.frame()` para crear un objeto con columnas de diferentes clases? Por qué? Verifique corriendo esa misma línea de código pero usando la función `cbind` en vez de `data.frame`.

```{r, eval=FALSE}
df <- data.frame(a = 1:10, 
                 b = c("a", "b", "c", "b", "e", "f", "g", "h", "i", "j"), 
                 d = c(T, F, F, T, F, T, T, T, F, F))
```

Práctica 1: Arreglos bidimensionales
=======================================================

* Indique si la siguiente línea de código presenta algún error. Justifique y verifique corriendo el código:


```{r, eval=FALSE}
rbind(df, c("a", "j", T))
```

* A partir de una serie de números aleatorios provenientes de una distribución normal, genere un arreglo tridimensional de longitud tres en cada dimensión. Ahora aplique una operación vectorizada para que cada elemento de dicho arreglo contenga ahora los valores originales pero multiplicados por tres. Sugerencia: es perfectamente válido usar el resultado de una función como el input del argumento de otra función. Por ejemplo:

```{r}
mean(x = sample(1:20, 5, replace = FALSE)) # sample(...) es el argumento x de mean()
```

Práctica 1: Listas, aleatorización
=======================================================

* Vamos a crear nuestra primera lista con la línea `lista <- list(x, y, z, matriz, df)`. Observe el contenido de ese objeto llamado lista. En qué difiere con respecto a los objetos creados por usted hasta el momento?

* Genere una lista de cuatro elementos con las siguientes categorías:

        + A es una muestra aleatoria de una distribución normal con media = 5 y sd = 10
        
        + B es una muestra aleatoria de una distribución binomial con size = 13 y prob = 0.2

        + C es un vector que aloja el resultado de diez lances en un experimento de cara y sello con una moneda no cargada, donde "C" es cara y "S" es sello
        
        + D es un vector conteniendo cualquier frase de su preferencia de no más de 10 palabras

Práctica 1: Reciclaje, aleatorización
=======================================================

* Dados los objetos `df` y `z` generados anteriormente, indique si la siguiente línea de código correrá sin generar avisos. Justifique su respuesta: `cbind(df, a = 1:3)` (A esto se le llama reciclaje)

* la siguiente línea de código genera un vector que contiene los días de la semana del congreso. Usando la función adecuada (cubierta durante esta sesión), elija al azar tres de dichos días para salir a rumbear durante el congreso: `dias <- c("lunes", "martes", "miercoles", "jueves", "viernes")`. El sábado no está porque hay que dedicar al menos un día a conocer Leticia, y el domingo se dedica al señor, así que tampoco aplica.

Práctica 1: Clases, coerción
=======================================================

* Genere una tabla cruzada de coerción pára las clases `integer`, `numeric`, `logical`, `character`, `factor`. Dicha tabla debe contener los siguientes resultados: `Si` (Si la coerción es posible), `NA` (coerción genera NA porque es ilógico realizarlo)


Clase | integer | numeric | logical | character | factor 
----------|---------|---------|---------|-----------|--------
integer   |         |         |         |           |        
numeric   |         |         |         |           |        
logical   |         |         |         |           |        
character |         |         |         |           |        
factor    |         |         |         |           |        


Práctica 1: Funciones
=======================================================

* En  el siguiente código identifique todas las funciones y determine su nombre y argumentos.


```{r, eval=FALSE}
specFamilyGlobal <- table(taxoinfo[, 2])

numbers <- as.vector(specFamilyGlobal)

families <- names(specFamilyGlobal)

specFamilyGlobal <- data.frame(families, as.integer(numbers))

tiff(filename = "specbyfamily.tiff", width = 1000, height = 480, units = "px")

familybar <- qplot(factor(taxoinfo[, 2], levels = names(sort(table(taxoinfo[, 2])))),
                   main = "Numero de especies por familia", 
                   xlab = "Familia", ylab = "Riqueza", geom = "bar")

familybar + theme(axis.text.x = element_text(angle = 90))

dev.off()

```

Práctica 1: Función which()
=======================================================

* Dado el vector corotos con el código abajo, determine usando la función which() qué valores son menores a 100

```{r, eval=FALSE}
set.seed(1985)
corotos <- sample(seq_len(1000), 50)
which(corotos < 100)
```

Estructura de vectores: Quiz
========================================================

* Con cuál de estas funciones podemos conocer las dimensiones de un objeto?

        + length()
        + dim()
        + str()
        + dimensiones()

Estructura de vectores: Quiz (R)
========================================================

* Con cuál de estas funciones podemos conocer las dimensiones de un objeto?

        + length()
        + dim() <<<<<<<<<
        + str()
        + dimensiones()

Estructura de vectores: Quiz
========================================================

* Determine mentalmente la longitud de los siguientes vectores. Posteriormente haga uso de la función adecuada para verificarlo

```{r, eval=FALSE}
teth <- "Bonum est praestolari cum silentio salutare R"
salto <- seq(from = 1, to = 20, by = 2)
alea <- rbinom(n = 10, size = 20, prob = 0.05)

```

Estructura de vectores: Quiz (R)
========================================================

* Determine mentalmente la longitud de los siguientes vectores. Posteriormente haga uso de la función adecuada para verificarlo

```{r, eval=TRUE}
teth <- "Bonum est praestolari cum silentio salutare R"
length(teth)
salto <- seq(from = 1, to = 20, by = 2)
length(salto)
alea <- rbinom(n = 10, size = 20, prob = 0.05)
length(alea)
```

Estructura de vectores: Quiz
========================================================

* Determine el nombre de los siguientes objetos

```{r, eval=FALSE}
teth <- "Bonum est praestolari cum silentio salutare R"
salto <- seq(from = 1, to = 20, by = 2)
alea <- rbinom(n = 10, size = 20, prob = 0.05)
```

Estructura de vectores: Quiz (R)
========================================================

* Determine el nombre de los siguientes objetos

```{r, eval=FALSE}
teth <- "Bonum est praestolari cum silentio salutare R" # teth
salto <- seq(from = 1, to = 20, by = 2) # salto
alea <- rbinom(n = 10, size = 20, prob = 0.05) # alea
```

* Modificando una frase que dijera una profesora en algún momento (hablando de taxonomía), "es como saber que tú eres tú y yo soy yo"

Estructura de vectores: Quiz
========================================================

* Determine la _clase_ de los siguientes objetos por inspección. Verifique usando la función adecuada


```{r, eval=FALSE}
alpha <- rep(x = "GAB", times = 5)
Y <- 2*rnorm(100) + rnorm(100)
l <- c(FALSE, TRUE, TRUE, FALSE)
L2 <- c(FALSE, TRUE, "true", FALSE)
```

* Cómo describiría a un recién iniciado en `R` lo que es una clase de un objeto?

Estructura de vectores: Quiz (R)
========================================================

* Determine la _clase_ de los siguientes objetos por inspección. Verifique usando la función adecuada
* Por qué la clase del objeto L2 es `character` y no `loogical` si contiene `TRUE`s y `FALSE`s?
* Cómo describiría a un recién iniciado en `R` lo que es una clase de un objeto? R/ La clase determina el tipo de datos que contiene un objeto, es como la _especie_ del objeto

***

<small style="font-size:.65em">
```{r, eval=TRUE}
alpha <- rep(x = "GAB", times = 5) # character
class(alpha)
Y <- 2*rnorm(100) + rnorm(100) # numeric
class(Y)
l <- c(FALSE, TRUE, TRUE, FALSE) # logical
class(l)
L2 <- c(FALSE, TRUE, "true", FALSE) # character
class(L2)
```
</small>

Práctica con subconjuntos e índices
========================================================

Práctica con subconjuntos e índices
========================================================

Práctica con subconjuntos e índices
========================================================

Práctica con subconjuntos e índices
========================================================

Paquetes (Aplicar si hay acceso a internet)
=======================================================

* Instalar los paquetes `lattice`, `ggplot2`, `dplyr`, `devtools` y `randtests`. Use la función `install.packages()`.
* Cargue el los paquetes `lattice` y `ggplot2`
* Adicionalmente instale el paquete de pesquerías FSA con las siguientes instrucciones:

```{r, echo=FALSE}
library(devtools)
install_github('droglenc/FSA') # Requiere tcltk, asegurarse de haberlo instalado!
install_github('droglenc/FSAdata')
```

* estos paquetes van a ser usado en la sesión sobre gráficos

Gráficas, sistema base
=======================================================

* Vamos a generar gráficos exploratorios para un conjunto de datos de edad y longitud total en el Bagre Azul (_Ictalurus furcatus_)

```{r, eval = FALSE}
library(FSAdata) # Cargar el paquete de datos de FSA
data(BlueCatfish) # Cargar en el ambiente de trabajo el conjunto de datos BlueCatfish
class(BlueCatfish) # Qué clase tiene el conjunto de datos?
summary(BlueCatfish) # Sumarios de las variables en el conjunto de datos
str(BlueCatfish) # Estructura del objeto BlueCatfish
```

Gráficas, sistema base, boxplot
=======================================================

* `boxplot(x, data, main, xlab)`

        + `x` = la variable de interés
        + `data` = conjunto de datos
        + `main` = título del gráfico
        + `ylab` = título del eje Y

```{r, eval = FALSE}
boxplot(variable, data = conjunto_de_datos) # Generar un boxplot para cada variable, tl y age
boxplot(variable, data, main = "Boxplot de la variable XXX", ylab = "Título del eje y")
```

***

```{r, echo=FALSE}
boxplot(BlueCatfish$age, main = "Boxplot de la variable Edad", ylab = "Edad")
```

Gráficas, sistema base, histograma
=======================================================

* `hist(x, data, breaks, freq, col, main, xlab, ylab, xlim, ylim, ...)`

```{r}
### Genere un histograma para la misma variable del boxplot. Use la ayuda de R con el operador ?hist para mayor información sobre el uso de esa función
```

Gráficas, sistema base, scatterplot, regresión lineal
=======================================================

* Vamos a practicar anotación de gráficas en base usando como ejemplo la regresión lineal
* La función lm() genera una regresión lineal simple para un modelo determinado, con variables x y y en un conjunto de datos. Para más información consultar ?lm
* El diagrama de dispersión se obtiene por la función plot() que cuando es usada con variables numéricas usa un método para graficar dispersión en el plano cartesiano. Los argumentos básicos de dicha función son x, y, aunque pueden especificarse otros argumentos como data, formula y anotadores gráficos. Consultar ?plot para mayor información

=======================================================

* Podemos superponer una recta a un gráfico obtenido con base usando la función abline. Esta función permite dibujar lineas horizontales, verticales, u oblicuas usando unvector de valores o un modelo lineal.
* Debe usar el conjunto de datos BlueCatfish cargado anteriormente para realizar el gráfico de dispersión y la regresión lineal. A continuación se da una idea de cómo realizarlo
* Al generar la gráfica use los argumentos adecuados para imprimirle un título y los nombres de los ejes

```{r}
# Use los datos del data frame BluCatfish para este ejercicio
# modelo <- lm(...) # esta función genera el modelo de regresión lineal
# plot(x, y, ...) es la función para generar un diagrama de dispersión en base
# abline(lm) # Esta función imprime la recta obtenida con el modelo lineal
```

* Después de lograr el objetivo usar el nivel pro adquirido en esta sesión para generar la misma grafica pero _solo con los primeros 50_ valores del conjunto de datos original 

=======================================================




=======================================================




=======================================================




=======================================================


